= Building {{{enzo}}} =

This is a quick, line by line example of checking out and building Enzo using current build system. A comprehensive list of the make system arguments can be found on the [wiki:MakeOptions MakeOptions] page.

This assumes that we're working from the public version, either the repository or the release. To get a copy, either see the CheckOutInstructions, or [wiki:Download] page.

== Checkout the Code ==

For the impatient, you can get a copy by checking out the latest public version.

{{{
cable:~ rpwagner$ svn co http://mngrid.ucsd.edu/svn/Enzo/public/trunk enzo
}}}

== Configuring (Sort Of) ==

This just clears any existing configurations left over from a previous machine,
and creates a couple of files for building.

{{{
cable:~ rpwagner$ cd enzo/
cable:~/enzo rpwagner$ ./configure 
}}}

== Go to the Source Directory ==

The source code for the various Enzo components are laid out in the {{{src/}}} directory.

{{{
cable:~/enzo/src rpwagner$ cd src/
cable:~/enzo/src rpwagner$ ls
Makefile enzo     enzohop  inits    ring     yt
cable:~/enzo/src rpwagner$ 
}}}

Right now, we're just building the main executable (the one that does the simulations), so we need the {{{enzo/}}} directory.

{{{
cable:~/enzo/src rpwagner$ cd enzo/
cable:~/enzo/src/enzo rpwagner$ ls -1 | wc
     590     590   13813
cable:~/enzo/src/enzo rpwagner$ 
}}}

Let's turn those 590 text files into one binary.

== Find the Right Machine File ==

We've chosen to go with configurations files based on specific machines. This means we can provide configurations files for most of the major NSF resources, and examples for many of the one-off (clusters, laptops, etc.).

These machine-specific configuration files are named: {{{Make.mach.machinename}}}. For this example, I'm working on my laptop. (FYI: My aging !PowerBook G4 is not the best development platform, mainly due to compile times, but the network between me and it is pretty fast, and doesn't go down.)

{{{
cable:~/enzo/src/enzo rpwagner$ ls Make.mach.*
Make.mach.bordner-krummhorn   Make.mach.ornl-jaguar-pgi
Make.mach.bwoshea-fnord       Make.mach.padoan-cluster
Make.mach.bwoshea-thunderhead Make.mach.psc-bigben
Make.mach.gso-mac             Make.mach.rpwagner-cable
Make.mach.ncsa-abe            Make.mach.sdsc-datastar
Make.mach.ncsa-cobalt         Make.mach.sdsc-teragrid
Make.mach.nics-kraken         Make.mach.unknown
Make.mach.ornl-jaguar-gnu
cable:~/enzo/src/enzo rpwagner$ 
}}}

Ahh, there it is--{{{Make.mach.rpwagner-cable}}}.

== Porting ==

If there's no machine file for the machine you're on--congratulations! You've won the Port Enzo Lottery!

Actually, this has gotten a lot easier. Here's the pattern to follow:

 1. Find a {{{Make.mach}}} file from a similar platform.
 1. Copy it to {{{Make.mach.site-machinename}}} (site = sdsc or owner, machinename = hostname).
 1. Edit the machine-specific settings (compilers, libraries, etc.).
 1. Build and test. 

Make sure you save your configuration file! If you're on a big system (multiple Enzo users), post your file to [http://mailman.ucsd.edu/mailman/listinfo/enzo-users-l the Enzo mailing list], and we'll consider adding it to the repository.

== Build the Makefile ==

Now that you have your configuration file, tell the build system to use it:

{{{
cable:~/enzo/src/enzo rpwagner$ make machine-rpwagner-cable

 *** Execute 'gmake clean' before rebuilding executables ***

   MACHINE: Rick's Laptop (Make.mach.rpwagner-cable)

cable:~/enzo/src/enzo rpwagner$ 
}}}

You may also to know the settings (precision, etc.) that's being use. You can find this out using {{{make show-config}}}. For a detailed explanation of what these mean, head over to the MakeOptions page.

{{{
cable:~/enzo/src/enzo rpwagner$ make show-config

   MACHINE: Rick's Laptop (Make.mach.rpwagner-cable)

   PARAMETER_MAX_SUBGRIDS:       100000
   PARAMETER_MAX_BARYONS:        20
   PARAMETER_MAX_TASKS_PER_NODE: 8

   CONFIG_PRECISION:             64
   CONFIG_PARTICLES:             64
   CONFIG_INTEGERS:              64
   CONFIG_INITS:                 64
   CONFIG_IO:                    32
   CONFIG_USE_MPI:               yes
   CONFIG_OBJECT_MODE:           64
   CONFIG_TASKMAP:               no
   CONFIG_PACKED_AMR:            no
   CONFIG_PACKED_MEM:            no
   CONFIG_JBPERF:                no
   CONFIG_PAPI:                  no
   CONFIG_UNIGRID_TRANSPOSE:     yes
   CONFIG_OOC_BOUNDARY:          no
   CONFIG_OPT:                   debug
   CONFIG_TESTING:               no
   CONFIG_ISOBCS:                no
   CONFIG_TPVEL:                 no

cable:~/enzo/src/enzo rpwagner$ 
}}}

== Build Enzo ==

The default build target is the main executable, {{{enzo}}}.

{{{
cable:~/enzo/src/enzo rpwagner$ make
awk 'BEGIN {print "#include <stdio.h>\nvoid auto_show_config(FILE *fp) {"}; {print "   fprintf (fp,\""$0"\\n\");"}; END {print "}"}' < temp.show-config > auto_show_config.C
awk 'BEGIN {print "#include <stdio.h>\nvoid auto_show_flags(FILE *fp) {"}; {print "   fprintf (fp,\""$0"\\n\");"}; END {print "}"}' < temp.show-flags > auto_show_flags.C
awk 'BEGIN {print "#include <stdio.h>\nvoid auto_show_version(FILE *fp) {"}; {print "   fprintf (fp,\""$0"\\n\");"}; END {print "}"}' < temp.show-version > auto_show_version.C
Updating DEPEND
pdating DEPEND
Compiling enzo.C
Compiling acml_st1.src
...
Compiling Zeus_zTransport.C
Linking
Success!
cable:~/enzo/src/enzo rpwagner$ 
}}}

After compiling, you can have the build system copy the executable to a {{{bin/}}} directory at the top level.

{{{
cable:~/enzo/src/enzo rpwagner$ make install 
if [ ! -e ../../bin ]; then mkdir ../../bin; fi
make -s show-flags   >& ../../bin/enzo.show-flags
make -s show-config  >& ../../bin/enzo.show-config
make -s show-version >& ../../bin/enzo.show-version
make -s show-diff    >& ../../bin/enzo.show-diff
cable:~/enzo/src/enzo rpwagner$
}}}

Now that you've got things build, maybe you'll want to check out some [wiki:Tutorials#ControllingEnzoSimulations Tutorials on running simulations].

== Building other Tools ==

Here's the quick steps to building {{{ring}}} and {{{inits}}}.

=== Inits ===

{{{
cable:~/enzo/src/ring rpwagner$ cd ../inits/
cable:~/enzo/src/inits rpwagner$ make
Compiling enzo_module.src90
Updating DEPEND
Compiling acml_st1.src
...
Compiling XChunk_WriteIntField.C
Linking
Success!
cable:~/enzo/src/inits rpwagner$ make install 
if [ ! -e ../../bin ]; then mkdir ../../bin; fi
make show-flags   >& ../../bin/inits.show-flags
make show-config  >& ../../bin/inits.show-config
make show-version >& ../../bin/inits.show-version
cable:~/enzo/src/inits rpwagner$
}}}

=== Ring ===

{{{
cable:~/enzo/src/enzo rpwagner$ cd ../ring/
cable:~/enzo/src/ring rpwagner$ make
Updating DEPEND
Compiling Ring_Decomp.C
Compiling Enzo_Dims_create.C
Compiling Mpich_V1_Dims_create.c
Linking
Success!
cable:~/enzo/src/ring rpwagner$ make install 
if [ ! -e ../../bin ]; then mkdir ../../bin; fi
make show-flags   >& ../../bin/ring.show-flags
make show-config  >& ../../bin/ring.show-config
make show-version >& ../../bin/ring.show-version
}}}
