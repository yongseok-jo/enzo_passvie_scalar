#include "fortran.def"
#include "phys_const.def"
      subroutine cie_thin_cooling_rate(temp, value)
c     written by Tom Abel    8/2003
c     compute optically thin cooling rate due to CIE cooling
c     as discussed in Ripamonti and Abel 2003.
c     input: temp is temperature in Kelvin
c     output total CIE cooling rate (including H2-H2 and He-H2)
C     in erg per second times cm^3 per gram per (gram in H2 molecules).
C     Hence to get cooling rate in erg/s cm^-3 one has to multiply by
C     the total mass density and the mass density in H2 molecules
C     (*rho*rho_H2).
C     This again is an approximation in that it assumes large H2 fractions 
C     (greater than 0.5).
C     Currently it is not clear what happens in the regime where H2
C     becomes mostly dissociated.
      implicit none
      real*8 temp
      real*8 value
      real*8 cie_table(288)
      real*8 t_cie(288)
      data t_cie/4.000e+02,4.040e+02,4.080e+02,4.121e+02,4.162e+02,
     $     4.204e+02,4.246e+02,4.289e+02,4.331e+02,4.375e+02,4.418e+02,
     $     4.463e+02,4.507e+02,4.552e+02,4.598e+02,4.644e+02,4.690e+02,
     $     4.737e+02,4.785e+02,4.832e+02,4.881e+02,4.930e+02,4.979e+02,
     $     5.029e+02,5.079e+02,5.130e+02,5.181e+02,5.233e+02,5.285e+02,
     $     5.338e+02,5.391e+02,5.445e+02,5.500e+02,5.555e+02,5.610e+02,
     $     5.666e+02,5.723e+02,5.780e+02,5.838e+02,5.896e+02,5.955e+02,
     $     6.015e+02,6.075e+02,6.136e+02,6.197e+02,6.259e+02,6.322e+02,
     $     6.385e+02,6.449e+02,6.513e+02,6.579e+02,6.644e+02,6.711e+02,
     $     6.778e+02,6.846e+02,6.914e+02,6.983e+02,7.053e+02,7.124e+02,
     $     7.195e+02,7.267e+02,7.339e+02,7.413e+02,7.487e+02,7.562e+02,
     $     7.637e+02,7.714e+02,7.791e+02,7.869e+02,7.948e+02,8.027e+02,
     $     8.107e+02,8.188e+02,8.270e+02,8.353e+02,8.437e+02,8.521e+02,
     $     8.606e+02,8.692e+02,8.779e+02,8.867e+02,8.956e+02,9.045e+02,
     $     9.136e+02,9.227e+02,9.319e+02,9.412e+02,9.506e+02,9.602e+02,
     $     9.698e+02,9.795e+02,9.892e+02,9.991e+02,1.009e+03,1.019e+03,
     $     1.029e+03,1.040e+03,1.050e+03,1.061e+03,1.071e+03,1.082e+03,
     $     1.093e+03,1.104e+03,1.115e+03,1.126e+03,1.137e+03,1.148e+03,
     $     1.160e+03,1.172e+03,1.183e+03,1.195e+03,1.207e+03,1.219e+03,
     $     1.231e+03,1.244e+03,1.256e+03,1.269e+03,1.281e+03,1.294e+03,
     $     1.307e+03,1.320e+03,1.333e+03,1.347e+03,1.360e+03,1.374e+03,
     $     1.387e+03,1.401e+03,1.415e+03,1.430e+03,1.444e+03,1.458e+03,
     $     1.473e+03,1.488e+03,1.502e+03,1.517e+03,1.533e+03,1.548e+03,
     $     1.563e+03,1.579e+03,1.595e+03,1.611e+03,1.627e+03,1.643e+03,
     $     1.660e+03,1.676e+03,1.693e+03,1.710e+03,1.727e+03,1.744e+03,
     $     1.762e+03,1.779e+03,1.797e+03,1.815e+03,1.833e+03,1.852e+03,
     $     1.870e+03,1.889e+03,1.908e+03,1.927e+03,1.946e+03,1.966e+03,
     $     1.985e+03,2.005e+03,2.025e+03,2.045e+03,2.066e+03,2.086e+03,
     $     2.107e+03,2.128e+03,2.150e+03,2.171e+03,2.193e+03,2.215e+03,
     $     2.237e+03,2.259e+03,2.282e+03,2.305e+03,2.328e+03,2.351e+03,
     $     2.375e+03,2.398e+03,2.422e+03,2.447e+03,2.471e+03,2.496e+03,
     $     2.521e+03,2.546e+03,2.571e+03,2.597e+03,2.623e+03,2.649e+03,
     $     2.676e+03,2.702e+03,2.730e+03,2.757e+03,2.784e+03,2.812e+03,
     $     2.840e+03,2.869e+03,2.897e+03,2.926e+03,2.956e+03,2.985e+03,
     $     3.015e+03,3.045e+03,3.076e+03,3.106e+03,3.138e+03,3.169e+03,
     $     3.201e+03,3.233e+03,3.265e+03,3.298e+03,3.331e+03,3.364e+03,
     $     3.397e+03,3.431e+03,3.466e+03,3.500e+03,3.535e+03,3.571e+03,
     $     3.606e+03,3.643e+03,3.679e+03,3.716e+03,3.753e+03,3.790e+03,
     $     3.828e+03,3.867e+03,3.905e+03,3.944e+03,3.984e+03,4.024e+03,
     $     4.064e+03,4.105e+03,4.146e+03,4.187e+03,4.229e+03,4.271e+03,
     $     4.314e+03,4.357e+03,4.401e+03,4.445e+03,4.489e+03,4.534e+03,
     $     4.579e+03,4.625e+03,4.671e+03,4.718e+03,4.765e+03,4.813e+03,
     $     4.861e+03,4.910e+03,4.959e+03,5.008e+03,5.058e+03,5.109e+03,
     $     5.160e+03,5.212e+03,5.264e+03,5.316e+03,5.370e+03,5.423e+03,
     $     5.477e+03,5.532e+03,5.588e+03,5.643e+03,5.700e+03,5.757e+03,
     $     5.814e+03,5.873e+03,5.931e+03,5.991e+03,6.051e+03,6.111e+03,
     $     6.172e+03,6.234e+03,6.296e+03,6.359e+03,6.423e+03,6.487e+03,
     $     6.552e+03,6.617e+03,6.684e+03,6.750e+03,6.818e+03,6.886e+03,
     $     6.955e+03/
      data cie_table/1.435e-15,1.488e-15,1.544e-15,1.601e-15,1.661e-15,
     $     1.722e-15,1.786e-15,1.853e-15,1.922e-15,1.993e-15,2.067e-15,
     $     2.143e-15,2.223e-15,2.305e-15,2.390e-15,2.479e-15,2.570e-15,
     $     2.665e-15,2.763e-15,2.865e-15,2.971e-15,3.080e-15,3.194e-15,
     $     3.314e-15,3.440e-15,3.571e-15,3.707e-15,3.848e-15,3.995e-15,
     $     4.148e-15,4.307e-15,4.472e-15,4.643e-15,4.822e-15,5.008e-15,
     $     5.201e-15,5.402e-15,5.611e-15,5.829e-15,6.056e-15,6.292e-15,
     $     6.539e-15,6.800e-15,7.071e-15,7.354e-15,7.648e-15,7.955e-15,
     $     8.274e-15,8.607e-15,8.954e-15,9.316e-15,9.692e-15,1.008e-14,
     $     1.049e-14,1.092e-14,1.136e-14,1.183e-14,1.235e-14,1.291e-14,
     $     1.350e-14,1.412e-14,1.477e-14,1.545e-14,1.617e-14,1.693e-14,
     $     1.773e-14,1.857e-14,1.946e-14,2.039e-14,2.137e-14,2.242e-14,
     $     2.352e-14,2.469e-14,2.592e-14,2.721e-14,2.857e-14,3.000e-14,
     $     3.151e-14,3.310e-14,3.477e-14,3.653e-14,3.838e-14,4.053e-14,
     $     4.300e-14,4.561e-14,4.837e-14,5.127e-14,5.434e-14,5.758e-14,
     $     6.099e-14,6.458e-14,6.837e-14,7.236e-14,7.687e-14,8.167e-14,
     $     8.675e-14,9.210e-14,9.776e-14,1.037e-13,1.100e-13,1.167e-13,
     $     1.237e-13,1.310e-13,1.388e-13,1.470e-13,1.556e-13,1.646e-13,
     $     1.741e-13,1.841e-13,1.946e-13,2.057e-13,2.172e-13,2.294e-13,
     $     2.421e-13,2.554e-13,2.694e-13,2.841e-13,2.994e-13,3.155e-13,
     $     3.323e-13,3.498e-13,3.682e-13,3.874e-13,4.074e-13,4.284e-13,
     $     4.502e-13,4.730e-13,4.968e-13,5.216e-13,5.475e-13,5.744e-13,
     $     6.025e-13,6.318e-13,6.622e-13,6.939e-13,7.268e-13,7.611e-13,
     $     7.967e-13,8.337e-13,8.721e-13,9.121e-13,9.535e-13,9.966e-13,
     $     1.041e-12,1.088e-12,1.136e-12,1.185e-12,1.237e-12,1.290e-12,
     $     1.346e-12,1.403e-12,1.462e-12,1.524e-12,1.587e-12,1.653e-12,
     $     1.721e-12,1.791e-12,1.864e-12,1.939e-12,2.016e-12,2.096e-12,
     $     2.179e-12,2.268e-12,2.374e-12,2.483e-12,2.597e-12,2.714e-12,
     $     2.836e-12,2.961e-12,3.091e-12,3.226e-12,3.365e-12,3.508e-12,
     $     3.657e-12,3.810e-12,3.968e-12,4.132e-12,4.300e-12,4.474e-12,
     $     4.654e-12,4.839e-12,5.029e-12,5.226e-12,5.428e-12,5.637e-12,
     $     5.852e-12,6.073e-12,6.301e-12,6.535e-12,6.776e-12,7.024e-12,
     $     7.280e-12,7.542e-12,7.812e-12,8.089e-12,8.374e-12,8.666e-12,
     $     8.967e-12,9.276e-12,9.593e-12,9.919e-12,1.025e-11,1.060e-11,
     $     1.099e-11,1.145e-11,1.193e-11,1.241e-11,1.292e-11,1.343e-11,
     $     1.396e-11,1.451e-11,1.507e-11,1.565e-11,1.624e-11,1.685e-11,
     $     1.748e-11,1.813e-11,1.879e-11,1.947e-11,2.017e-11,2.089e-11,
     $     2.162e-11,2.238e-11,2.316e-11,2.395e-11,2.477e-11,2.561e-11,
     $     2.646e-11,2.734e-11,2.824e-11,2.917e-11,3.011e-11,3.118e-11,
     $     3.234e-11,3.353e-11,3.475e-11,3.601e-11,3.729e-11,3.861e-11,
     $     3.996e-11,4.135e-11,4.277e-11,4.422e-11,4.571e-11,4.724e-11,
     $     4.881e-11,5.041e-11,5.205e-11,5.373e-11,5.545e-11,5.721e-11,
     $     5.901e-11,6.085e-11,6.273e-11,6.470e-11,6.692e-11,6.920e-11,
     $     7.152e-11,7.391e-11,7.635e-11,7.885e-11,8.141e-11,8.402e-11,
     $     8.670e-11,8.944e-11,9.224e-11,9.510e-11,9.803e-11,1.010e-10,
     $     1.041e-10,1.072e-10,1.104e-10,1.137e-10,1.170e-10,1.204e-10,
     $     1.239e-10,1.275e-10,1.311e-10,1.348e-10,1.386e-10,1.425e-10,
     $     1.464e-10,1.505e-10,1.546e-10,1.588e-10,1.631e-10,1.674e-10,
     $     1.719e-10/
      integer i, j, jmin, jmax
      real*8 mh
      mh = mass_h
c     rough low temperature extrapolation
      if (temp .le. t_cie(1)) then
         value = cie_table(1)*(temp/t_cie(1))**4
c            print*, value
c         write(6,*), "inside_cie: ", temp, value
         return
      endif
c     extrapolate high temperature with **3. Not discussed in Ripamonti
c     & Abel ...
      if (temp .ge. t_cie(288)) then
         value = cie_table(288)*(temp/t_cie(288))**3
c            print*, value
c         write(6,*), "inside_cie: ", temp, value
         return
      endif
      jmin = 1 
      jmax = 288
      do i=0,200
         j = (jmin+jmax)/2
         if (temp .ge. t_cie(j)) then 
            jmin=j
         else 
            jmax=j
         endif            
         if ((jmax-jmin) .le. 1) then
c            write(6,*) j, jmin, jmax,cie_table(jmin),cie_table(jmax)
c            write(6,*) t_cie(jmin),temp,t_cie(jmax)
            value =
     $           (cie_table(jmax)*(temp-t_cie(jmin))+
     $            cie_table(jmin)*(t_cie(jmax)-temp))/
     $            (t_cie(jmax)-t_cie(jmin))
c            write(6,*), "inside_cie: ", temp, value
            return
         endif
      enddo
      return 
      end
